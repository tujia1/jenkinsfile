#!groovy
@Library('jenkinslib') _

//导入共享库
def tools = new org.devops.tools()
def build = new org.devops.build()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def talk = new org.devops.dingtalk()

//添加全局变量
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String srcUrl = "${env.srcUrl}"

//增加手动触发

//判断分支增加输出构建信息（构建者、构建分支）
if ("${runOpts}" == "GitlabPush"){
    branchName = branch - "refs/heads/"
    currentBuild.description = "Trigger by ${userName} ${branch}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")

} else {
    userEmail = "1207960652@qq.com"
}    
    


pipeline{
    agent{ node { label "node"}}
    stages{
        stage('CheckOut'){
            steps{
                script{
                   tools.PrintMes('开始下载代码','green')
                   checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab', url: "${srcUrl}"]]])
               }
            }

        }
        stage('build'){
            steps{
                script{
                    tools.PrintMes('开始打包','green')
                    build.Build(buildType,buildShell)
                }
            }
        }
        stage('QA'){
            steps{
                script{
                    tools.PrintMes('搜索项目','green')
                    result = sonarapi.SerarchProject("${JOB_NAME}")
                    println(result)
                    if(result == "false"){
                        println("${JOB_NAME}---项目不存在,准备创建项目---> ${JOB_NAME}！")
                        sonarapi.CreateProject("${JOB_NAME}")
                    } else {
                        println("${JOB_NAME}---项目已存在！")
                    }    
                    
                    tools.PrintMes("配置项目质量规则","green")
                    qpName="${JOB_NAME}".split("-")[0]   //Sonar%20way
                    sonarapi.ConfigQualityProfiles("${JOB_NAME}","java",qpName)
             
                    tools.PrintMes("配置质量阈","green")
                    sonarapi.ConfigQualityGates("${JOB_NAME}",qpName)
                                                
                    tools.PrintMes('开始扫描','green')
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src")
                    
                    sleep 30
                    tools.PrintMes("获取扫描结果","green")
                    result = sonarapi.GetProjectStatus("${JOB_NAME}")
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                    } else {
                        println(result)
                    }
                }
            }        
        }               
    }
    post{
       always{
           script{
               println("执行完毕")
           }

       }

       success{
           script{
               println("success")
               if ("${runOpts}" == "GitlabPush"){
                   gitlab.ChangeCommitStatus(projectId,commitSha,"success")
               }    
               toemail.Email("流水线成功",userEmail)
               talk.Dingtalk("流水线构建成功")
           }

       }

       failure{
          script{
              println("failure")
              if("${runOpts}" == "GitlabPush"){
                  gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
              }    
              toemail.Email("流水线失败",userEmail)
              talk.Dingtalk("流水线构建失败")
          }

       }

       aborted{
          script{
              println("aborted")
              if("${runOpts}" == "GitlabPush"){
                  gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
              }    
              toemail.Email("流水线取消",userEmail)
              talk.Dingtalk("流水线构建取消")

          }
       }
    }
}
