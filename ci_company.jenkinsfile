#!groovy
@Library('jenkinslib') _

//导入共享库
def tools = new org.devops.tools()
def build = new org.devops.build()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def talk = new org.devops.dingtalk()

//添加全局变量
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String srcUrl = "${env.srcUrl}"

//增加手动触发
def runOpts
//判断分支增加输出构建信息（构建者、构建分支）
if ("${runOpts}" == "GitlabPush"){
    branchName = branch - "refs/heads/"
    currentBuild.description = "Trigger by ${userName} ${branch}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")

} else {
    userEmail = "1207960652@qq.com"
}    
    


pipeline{
    agent{ node { label "node"}}
    stages{
        stage('CheckOut'){
            steps{
                wrap([$class: 'BuildUser']) {
                    script {
                      BuildUser = "${env.BUILD_USER}"
                      return BuildUser
                    }
                }
                println BuildUser
                script{
                   tools.PrintMes('开始下载代码','green')
                   checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab', url: "${srcUrl}"]]])
               }
            }

        }
        stage('build'){
            steps{
                script{
                    tools.PrintMes('开始打包','green')
                    build.Build(buildType,buildShell)
                }
            }
        }
        stage('QA'){
            steps{
                script{
                    tools.PrintMes('搜索项目','green')
                    result = sonarapi.SerarchProject("${JOB_NAME}")
                    println(result)
                    if(result == "false"){
                        println("${JOB_NAME}---项目不存在,准备创建项目---> ${JOB_NAME}！")
                        sonarapi.CreateProject("${JOB_NAME}")
                    } else {
                        println("${JOB_NAME}---项目已存在！")
                    }    
                    
                    tools.PrintMes("配置项目质量规则","green")
                    qpName="${JOB_NAME}".split("-")[0]   //Sonar%20way
                    sonarapi.ConfigQualityProfiles("${JOB_NAME}","java",qpName)
             
                    tools.PrintMes("配置质量阈","green")
                    sonarapi.ConfigQualityGates("${JOB_NAME}",qpName)
                                                
                    tools.PrintMes('开始扫描','green')
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src","${branchName}")
                    
                    sleep 30
                    tools.PrintMes("获取扫描结果","green")
                    result = sonarapi.GetProjectStatus("${JOB_NAME}","${branchName}")
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                    } else {
                        println(result)
                    }
                }
            }        
        }
        stage('上传制品库'){
            steps{
                script{
                    tools.PrintMes('开始上传到制品库-maven-snapshots','green')
                    def jarName = sh returnStdout: true, script: "cd target;ls *.jar"
                    jarName = jarName - "\n"
                    def pom = readMavenPom file: 'pom.xml'
                    pomVersion = "${pom.version}" 
                    pomArtifact = "${pom.artifactId}"
                    pomPackaging = "${pom.packaging}"
                    pomGroupId = "${pom.groupId}"
                    println("${pomGroupId}-${pomArtifact}-${pomVersion}-${pomPackaging}")
                    def mvnHome = tool "M2"
                    sh  """
                        cd target/
                        ${mvnHome}/bin/mvn deploy:deploy-file -Dmaven.test.skip=true  \
                            -Dfile=${jarName} -DgroupId=${pomGroupId} \
                            -DartifactId=${pomArtifact} -Dversion=${pomVersion}  \
                            -Dpackaging=${pomPackaging} -DrepositoryId=maven-snapshots \
                            -Durl=http://106.52.119.43:8081/repository/maven-snapshots/
                      """
                }
            }
        }
    }
    post{
       always{
           script{
               println("执行完毕")
           }

       }

       success{
           script{
               println("success")
               if ("${runOpts}" == "GitlabPush"){
                   gitlab.ChangeCommitStatus(projectId,commitSha,"success")
               }    
               toemail.Email("流水线成功",userEmail)
               talk.dingtalk()
           }

       }

       failure{
          script{
              println("failure")
              if("${runOpts}" == "GitlabPush"){
                  gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
              }    
              toemail.Email("流水线失败",userEmail)
              talk.dingtalk()
          }

       }

       aborted{
          script{
              println("aborted")
              if("${runOpts}" == "GitlabPush"){
                  gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
              }    
              toemail.Email("流水线取消",userEmail)
              talk.dingtalk()

          }
       }
    }
}
